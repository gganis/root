--- ./tools/clang/include/clang/CodeGen/ModuleBuilder.h	2013-10-19 14:43:43.000000000 -0700
+++ ./tools/clang/include/clang/CodeGen/ModuleBuilder.h	2013-04-26 16:49:46.000000000 -0700
@@ -20,12 +20,14 @@
 namespace llvm {
   class LLVMContext;
   class Module;
+  class Type;
 }
 
 namespace clang {
   class DiagnosticsEngine;
   class LangOptions;
   class CodeGenOptions;
+  class QualType;
   class TargetOptions;
 
   class CodeGenerator : public ASTConsumer {
@@ -33,6 +35,7 @@
   public:
     virtual llvm::Module* GetModule() = 0;
     virtual llvm::Module* ReleaseModule() = 0;
+    virtual llvm::Type* ConvertType(QualType T) = 0;
   };
 
   /// CreateLLVMCodeGen - Create a CodeGenerator instance.
--- ./tools/clang/lib/CodeGen/ModuleBuilder.cpp	2013-10-19 14:43:44.000000000 -0700
+++ ./tools/clang/lib/CodeGen/ModuleBuilder.cpp	2013-09-30 00:55:31.000000000 -0700
@@ -14,6 +14,7 @@
 #include "clang/CodeGen/ModuleBuilder.h"
 #include "CodeGenModule.h"
 #include "CGDebugInfo.h"
+#include "CodeGenTypes.h"
 #include "clang/AST/ASTContext.h"
 #include "clang/AST/DeclObjC.h"
 #include "clang/AST/Expr.h"
@@ -49,9 +50,15 @@
     }
 
     virtual llvm::Module* ReleaseModule() {
+      assert(M && "Releasing 0?");
+      Builder->Release();
       return M.take();
     }
 
+    virtual llvm::Type* ConvertType(QualType T) {
+      return Builder->getTypes().ConvertType(T);
+    }
+
     virtual void Initialize(ASTContext &Context) {
       Ctx = &Context;
 
